---
title: "interuni"
format: html
editor: visual
---

```{r, tidy=TRUE, results='hide', results='hold', warning = FALSE, message = FALSE}
library(xgboost)
library(tidyverse)
library(visdat)
library(xgboost)
library(naivebayes)
library(janitor)
library(gt)
library(caret)
library(MLmetrics)
```


```{r, tidy=TRUE, results='hide', results='hold', warning = FALSE, message = FALSE}
train = read.csv("inter-uni-datathon-2024-nsw/test.csv")
test = read.csv("inter-uni-datathon-2024-nsw/train.csv")
```

```{r, tidy=TRUE, results='hide', results='hold', warning = FALSE, message = FALSE}
test_labs_for_later = test$TransactionNumber
male_replacements = c("isnotfemale", "Male", "man", "he")
female_replacements = c("Female", "fem", "she", "woman")

train$TransactionDate = weekdays(as.Date(train$TransactionDate))
test$TransactionDate = weekdays(as.Date(test$TransactionDate))

for(i in 1:nrow(train)){
  if(train$Gender[i] %in% male_replacements){
    train$Gender[i] = "Male"
  } else {train$Gender[i] = "Female"}
}

for(i in 1:nrow(test)){
  if(test$Gender[i] %in% male_replacements){
    test$Gender[i] = "Male"
  } else {test$Gender[i] = "Female"}
}

#Delete useless columns
train = subset(train, select = -c(TransactionNumber, Latitude, Longitude, EmailDomain))
test = subset(test, select = -c(TransactionNumber, Latitude, Longitude, EmailDomain))


#Convert Transaction Time to minutes after midnight
train$TransactionTime = gsub("/", ":", train$TransactionTime)
train$TransactionTime = substring(train$TransactionTime, 1, 8)

test$TransactionTime = gsub("/", ":", test$TransactionTime)
test$TransactionTime = substring(test$TransactionTime, 1, 8)

train$TransactionTime = as.numeric(substring(train$TransactionTime, 1, 2))*60 +
  as.numeric(substring(train$TransactionTime, 4, 5)) +
  as.numeric(substring(train$TransactionTime, 7, 8))*(1/60)

test$TransactionTime = as.numeric(substring(test$TransactionTime, 1, 2))*60 +
  as.numeric(substring(test$TransactionTime, 4, 5)) +
  as.numeric(substring(test$TransactionTime, 7, 8))*(1/60)

train$Income = parse_number(train$Income)
test$Income = parse_number(test$Income)

#Expenditure all in the same currency
train$Expenditure[grepl("AUD", train$Expenditure)] = parse_number(train$Expenditure)
train$Expenditure[grepl("AU", train$Expenditure)] = parse_number(train$Expenditure)
train$Expenditure[grepl("AED", train$Expenditure)] = parse_number(train$Expenditure)*0.4
train$Expenditure = as.numeric(train$Expenditure)

test$Expenditure[grepl("AUD", test$Expenditure)] = parse_number(test$Expenditure)
test$Expenditure[grepl("AU", test$Expenditure)] = parse_number(test$Expenditure)
test$Expenditure[grepl("AED", test$Expenditure)] = parse_number(test$Expenditure)*0.4
test$Expenditure = as.numeric(test$Expenditure)

#Gift Transaction
train$GiftsTransaction[grepl("Â£", train$GiftsTransaction)] = parse_number(train$GiftsTransaction)*1.96
train$GiftsTransaction[grepl("GBP", train$GiftsTransaction)] = parse_number(train$GiftsTransaction)*1.96
train$GiftsTransaction[grepl("AUD", train$GiftsTransaction)] = parse_number(train$GiftsTransaction)
train$GiftsTransaction[grepl("AU", train$GiftsTransaction)] = parse_number(train$GiftsTransaction)
train$GiftsTransaction = as.numeric(train$GiftsTransaction)

test$GiftsTransaction[grepl("Â£", test$GiftsTransaction)] = parse_number(test$GiftsTransaction)*1.96
test$GiftsTransaction[grepl("GBP", test$GiftsTransaction)] = parse_number(test$GiftsTransaction)*1.96
test$GiftsTransaction[grepl("AUD", test$GiftsTransaction)] = parse_number(test$GiftsTransaction)
test$GiftsTransaction[grepl("AU", test$GiftsTransaction)] = parse_number(test$GiftsTransaction)
test$GiftsTransaction = as.numeric(test$GiftsTransaction)

#Transaction Amount
train$TransactionAmount[grepl("AUD", train$TransactionAmount)] = parse_number(train$TransactionAmount)
train$TransactionAmount[grepl("AU", train$TransactionAmount)] = parse_number(train$TransactionAmount)
train$TransactionAmount[grepl("AED", train$TransactionAmount)] = parse_number(train$TransactionAmount)*0.4
train$TransactionAmount = as.numeric(train$TransactionAmount)

test$TransactionAmount[grepl("AUD", test$TransactionAmount)] = parse_number(test$TransactionAmount)
test$TransactionAmount[grepl("AU", test$TransactionAmount)] = parse_number(test$TransactionAmount)
test$TransactionAmount[grepl("AED", test$TransactionAmount)] = parse_number(test$TransactionAmount)*0.4
test$TransactionAmount = as.numeric(test$TransactionAmount)

#Location



adl_rep = c("ADL","ADELAIDE","ADELAIDE CITY")
syd_rep = c("SYD", "SYDNEY")
mlb_rep = c("MLB", "MELB", "MEL", "MELBURN", "MELBOURNE")
brs_rep = c("BNE", "BRISBANE" )
hb_rep = c("HOBART", "HBT")
pth_rep = c("PTH", "PERTH")
cb_rep = c("CANBERRA", "CBR")
dw_rep = c("DARWIN", "DRW")

train$TransactionLocation = toupper(train$TransactionLocation)
for(i in 1:nrow(train)){
  if(train$TransactionLocation[i] %in% adl_rep){
    train$TransactionLocation[i] = "ADL"
  } else if (train$TransactionLocation[i] %in% syd_rep){
    train$TransactionLocation[i] = "SYD"
  }else if (train$TransactionLocation[i] %in% mlb_rep){
    train$TransactionLocation[i] = "MLB"
  }else if (train$TransactionLocation[i] %in% brs_rep){
    train$TransactionLocation[i] = "BRS"
  }else if (train$TransactionLocation[i] %in% hb_rep){
    train$TransactionLocation[i] = "HB"
  }else if (train$TransactionLocation[i] %in% pth_rep){
    train$TransactionLocation[i] = "PTH"
  }else if (train$TransactionLocation[i] %in% cb_rep){
    train$TransactionLocation[i] = "CB"
  }else if (train$TransactionLocation[i] %in% dw_rep){
    train$TransactionLocation[i] = "DRW"
  }
}

test$TransactionLocation = toupper(test$TransactionLocation)
for(i in 1:nrow(test)){
  if(test$TransactionLocation[i] %in% adl_rep){
    test$TransactionLocation[i] = "ADL"
  } else if (test$TransactionLocation[i] %in% syd_rep){
    test$TransactionLocation[i] = "SYD"
  }else if (test$TransactionLocation[i] %in% mlb_rep){
    test$TransactionLocation[i] = "MLB"
  }else if (test$TransactionLocation[i] %in% brs_rep){
    test$TransactionLocation[i] = "BRS"
  }else if (test$TransactionLocation[i] %in% hb_rep){
    test$TransactionLocation[i] = "HB"
  }else if (test$TransactionLocation[i] %in% pth_rep){
    test$TransactionLocation[i] = "PTH"
  }else if (test$TransactionLocation[i] %in% cb_rep){
    test$TransactionLocation[i] = "CB"
  }else if (test$TransactionLocation[i] %in% dw_rep){
    test$TransactionLocation[i] = "DRW"
  }
}

train$DeviceType[train$DeviceType == "mob"] = "Mobile"
train$DeviceType[train$DeviceType == "iphone 15"] = "Mobile"
train$DeviceType[train$DeviceType == "smartphone"] = "Mobile"
train$DeviceType[train$DeviceType == "galaxys7"] = "Mobile"
train$DeviceType[train$DeviceType == "Tablet"] = "Mobile"

test$DeviceType[test$DeviceType == "mob"] = "Mobile"
test$DeviceType[test$DeviceType == "iphone 15"] = "Mobile"
test$DeviceType[test$DeviceType == "smartphone"] = "Mobile"
test$DeviceType[test$DeviceType == "galaxys7"] = "Mobile"
test$DeviceType[test$DeviceType == "Tablet"] = "Mobile"

train$Age[train$Age >1000] = train$Age/1000
train$Age[train$Age < 1 & train$Age > 0] = train$Age[train$Age < 1 & train$Age > 0] * 1000
train$Age[train$Age <0] = abs(train$Age)


test$Age[test$Age >1000] = test$Age/1000
test$Age[test$Age < 1 & test$Age > 0] = test$Age[test$Age < 1 & test$Age > 0] * 1000
test$Age[test$Age <0] = abs(test$Age)

write.csv(train, "actual_clean_train.csv",row.names = FALSE)
write.csv(test, "actual_clean_test.csv", row.names=FALSE)

```

```{r, tidy=TRUE, results='hide', results='hold', warning = FALSE, message = FALSE}
fraud_labels = train$IsFraud
train = subset(train, select = -IsFraud)


new_gender = model.matrix(~Gender-1, train)
new_occupation = model.matrix(~Occupation-1, train)
new_education = model.matrix(~EducationLevel-1, train)
new_marital = model.matrix(~MaritalStatus-1, train)
new_merchant = model.matrix(~MerchantID-1, train)
new_transaction = model.matrix(~TransactionType-1, train)
new_location = model.matrix(~TransactionLocation-1, train)
new_device = model.matrix(~DeviceType-1, train)
new_terrorism = model.matrix(~Terrorism-1, train)

train = cbind(train, new_gender, new_occupation, new_education, new_marital, new_merchant, new_transaction, new_location, new_device, new_terrorism)
train = subset(train, select = -c(Gender, Occupation, EducationLevel, MaritalStatus, MerchantID, TransactionType, TransactionLocation, DeviceType, Terrorism))

new_gender = model.matrix(~Gender-1, test)
new_occupation = model.matrix(~Occupation-1, test)
new_education = model.matrix(~EducationLevel-1, test)
new_marital = model.matrix(~MaritalStatus-1, test)
new_merchant = model.matrix(~MerchantID-1, test)
new_transaction = model.matrix(~TransactionType-1, test)
new_location = model.matrix(~TransactionLocation-1, test)
new_device = model.matrix(~DeviceType-1, test)
new_terrorism = model.matrix(~Terrorism-1, test)

test = cbind(test, new_gender, new_occupation, new_education, new_marital, new_merchant, new_transaction, new_location, new_device, new_terrorism)
test = subset(test, select = -c(Gender, Occupation, EducationLevel, MaritalStatus, MerchantID, TransactionType, TransactionLocation, DeviceType, Terrorism))


train = data.matrix(train)
fraud_labels = data.matrix(fraud_labels)
test = data.matrix(test)


dtrain = xgb.DMatrix(train, label = fraud_labels)
dtest = xgb.DMatrix(test)


model = xgboost(data = dtrain, nround = 10, objective = "binary:logistic")

```

```{r, tidy=TRUE, results='hide', results='hold', warning = FALSE, message = FALSE}
sample_rate = 0.75
epochs = 4
set.seed(123)


actual_results = numeric(nrow(dtest))
accuracy = 0

for(i in 1:epochs){
  train_indicies = sample(1:nrow(train), floor(sample_rate * nrow(train)), replace = FALSE)
  train1 = train[train_indicies,]
  test1 = fraud_labels[train_indicies]
  
  train2 = train[-train_indicies,]
  test2 = fraud_labels[-train_indicies]
  
  model = xgboost(data = dtrain, nround = 40, objective = "binary:logistic")
  
  practice_preds = predict(model, train2)
  accuracy = accuracy + (sum(round(practice_preds) == test2)/length(test2))
  conf = confusionMatrix(data=as.factor(round(practice_preds)), reference = as.factor(test2))
  #print(conf)
  print(F1_Score(round(practice_preds), test2))

  
  actual_predicts = predict(model, dtest)
  actual_results = actual_results + actual_predicts
}
actuals = (round(actual_results/epochs))

results = data.frame(TransactionNumber = test_labs_for_later, IsFraud = actuals)
write.csv(results, file = "xgboost.csv", row.names = FALSE)

```

